@inject DialogsService DialogsService;

<Styled @bind-Classname="@_CssWrapper">
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
</Styled>
<Styled @bind-Classname="@_CssContainerActive">
    &::before {
    opacity: 0.5;
    outline: 1px solid #0088CC;
    }
</Styled>
<Styled @bind-Classname="@_CssContainerInactive">
    &::before {
    outline: 1px solid #d8d8d8;
    }
</Styled>
<Styled @bind-Classname="@_CssContainer"
         ComposeActive="@_CssContainerActive" ComposeActiveIf="@_Context.Active"
         ComposeInactive="@_CssContainerInactive" ComposeInactiveIf="@(!_Context.Active)">
    animation: reveal 150ms;
    border: 5px solid transparent;
    position: absolute;
    z-index: 1001;

    &::before {
    bottom: 0;
    content: '';
    display: block;
    left: 0;
    position: absolute;
    right: 0;
    top: 0;
    z-index: -1;
    }
</Styled>
<Styled @bind-Classname="@_CssCloseButtonActive">
    color: #666;
    cursor: pointer;
    &:hover {
    color: #ff7777;
    }
</Styled>
<Styled @bind-Classname="@_CssCloseButtonInactive">
    color: #AAA;
    cursor: default;
    &:hover {
    color: #AAA;
    cursor: default;
    }
</Styled>
<Styled @bind-Classname="@_CssCloseButton"
         ComposeActive="@_CssCloseButtonActive" ComposeActiveIf="@(!_Context.CloseButtonInactive)"
         ComposeInactive="@_CssCloseButtonInactive" ComposeInactiveIf="@_Context.CloseButtonInactive">
    float: right;
    height: 26px;
    position: relative;
    width: 26px;
    z-index: 10;

    &::after {
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
    content: '';
    font-family: 'ico16';
    font-size: 28px;
    left: 4px;
    line-height: 16px;
    position: absolute;
    top: 8px;
    content: '\d7';
    }
</Styled>
<Styled @bind-Classname="@_CssHeader">
    -khtml-user-select: none;
    -moz-user-select: -moz-none;
    -webkit-user-select: none;
    background-color: #e5e5e5;
    cursor: default;
    height: 36px;
    left: 0;
    overflow: hidden;
    padding-right: 2px;
    position: absolute;
    top: 0;
    user-select: none;
    width: 100%;
    z-index: 1001;
</Styled>
<Styled @bind-Classname="@_CssHeaderTitleNoIcon">
    padding-left: 7px;
</Styled>
<Styled @bind-Classname="@_CssHeaderTitleWithIcon">
    padding-left: 35px;
</Styled>
<Styled @bind-Classname="@_CssHeaderTitle"
         ComposeNoIcon="@_CssHeaderTitleNoIcon" ComposeNoIconIf="@(string.IsNullOrEmpty(_Context.Icon))"
         ComposeWithIcon="@_CssHeaderTitleWithIcon" ComposeWithIconIf="@(!string.IsNullOrEmpty(_Context.Icon))">
    -khtml-user-select: none;
    -moz-user-select: -moz-none;
    -webkit-user-select: none;
    color: #333;
    cursor: default;
    font-style: normal;
    font-weight: inherit;
    line-height: 36px;
    overflow: hidden;

    text-overflow: ellipsis;
    user-select: none;
    white-space: nowrap;

    & > span {
    font-weight: bold;
    padding-right: 15px;
    }
</Styled>
<Styled @bind-Classname="@_CssIcon">
    color: #333;
    font-family: 'ico16';
    font-size: 16px;
    height: 18px;
    left: 10px;
    line-height: 18px;
    position: absolute;
    top: 8px;
    width: 18px;
    background: url('@_Context.Icon') 0 0 no-repeat;
</Styled>
<Styled @bind-Classname="@_CssContent">
    box-shadow: 0 0 10px #000;
    box-shadow: 0 0 16px rgba(0, 0, 0, 0.25);
    cursor: default;
    height: 100%;
    overflow: hidden;
    width: 100%;
    background-color: #fff;
    padding: 40px 10px;
    z-index: 1001;
</Styled>
<Styled @bind-Classname="@_CssFooter">
    width: 100%;
    padding: 6px 10px;
    background: #f7f7f7;
    border-top: 1px solid #E3E3E3;
    bottom: 0;
    overflow: hidden;
    white-space: nowrap;
    position: absolute;
    display: flex;
    justify-content: center;
    z-index: 1001;
</Styled>
<Styled @bind-Classname="@_CssFooterButton">
    margin: 0 5px;
</Styled>
<Styled @bind-Classname="@_CssOverlay">
    position: absolute;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    z-index: 1000;
</Styled>

<div class="@_CssWrapper" style="z-index: @_Context.ZIndex" @onmousedown="OnDragStart" @onmouseup="OnDragEnd" @onmousemove="OnDrag" @onmousemove:preventDefault>
    @if (_Context.Modal) {
        <div class="@_CssOverlay"></div>
    }
    <div class="@_CssContainer" style="@Position">
        <div class="@_CssHeader" @onmouseenter="OnMouseEnter" @onmouseleave="OnMouseLeave">
            <div class="@_CssCloseButton" @onclick="@CancelClickHandler"></div>
            @if (!string.IsNullOrEmpty(_Context.Icon)) {
                <div class="@_CssIcon"></div>
            }
            <div class="@_CssHeaderTitle">
                <span>@_Context.Header</span>
            </div>
        </div>

        <div class="@_CssContent">
            @_Context.ChildContent
            <Properties Values="@(new { _Draggable, _Active, _Context.Left, _Context.Top, _InitialX, _InitialY, _XOffset, _YOffset })" />
        </div>

        <div class="@_CssFooter">
            @foreach ((string title, string result) in _Context.Actions) {
                <input class="@_CssFooterButton" type="button" value="@title" @onclick="@(() => ActionHandler(result))" />
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Identifier { get; set; }
    
    private void CancelClickHandler() {
        if (_Context.Active && !_Context.CloseButtonInactive) {
            _Context.OnActionExecuted(Identifier, _Context.CancelResult);
        }
    }

    private void ActionHandler(string result) {
        _Context.OnActionExecuted(Identifier, result);
    }

    private DialogContext _Context;

    protected override void OnParametersSet() {
        base.OnParametersSet();
        _Context = DialogsService.FindDialogContext(Identifier);
        _XOffset = _Context.Left;
        _YOffset = _Context.Top;
    }

    #region Styles

    private string _CssContainer;
    private string _CssContainerActive;
    private string _CssContainerInactive;
    private string _CssContainerMaximized;
    private string _CssCloseButton;
    private string _CssCloseButtonActive;
    private string _CssCloseButtonInactive;
    private string _CssHeader;
    private string _CssHeaderTitleNoIcon;
    private string _CssHeaderTitleWithIcon;
    private string _CssHeaderTitle;
    private string _CssIcon;
    private string _CssContent;
    private string _CssFooter;
    private string _CssFooterButton;
    private string _CssOverlay;
    private string _CssWrapper;

    #endregion

    #region Draggable

    private string Position {
        get {
            string units = _Context.Percents ? "%" : "px";
            return $"top: {_Context.Top}{units}; left: {_Context.Left}{units}; width: {_Context.Width}{units}; height: {_Context.Height}{units}";
        }
    }

    private bool _Draggable;
    private bool _Active;
    private double _InitialX;
    private double _InitialY;
    private double _XOffset;
    private double _YOffset;

    private void OnMouseEnter() {
        if (!_Context.Percents) {
            _Draggable = true;
        }
    }

    private void OnMouseLeave() {
        _Draggable = false;
    }

    private void OnDragStart(MouseEventArgs e) {
        if (!_Draggable) {
            return;
        }

        _InitialX = e.ClientX - _XOffset;
        _InitialY = e.ClientY - _YOffset;
        _Active = true;
    }

    private void OnDragEnd() {
        if (_Active) {
            _InitialX = _Context.Left;
            _InitialY = _Context.Top;
            _Active = false;
        }
    }

    private void OnDrag(MouseEventArgs e) {
        if (_Active) {
            _Context.Left = e.ClientX - _InitialX;
            _Context.Top = e.ClientY - _InitialY;
            _XOffset = _Context.Left;
            _YOffset = _Context.Top;
        }
    }

    #endregion

}